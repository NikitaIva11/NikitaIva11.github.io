function lection_2(){
const start = document.querySelectorAll('.start')
const all = document.querySelectorAll('.all')
const pow = document.querySelectorAll('.pow')
const result = document.querySelector('.result')
//----------------------------------------------------------------------------------------
// 1. Ввести с клавиатуры 2 числа `a` и `b` 
// (где `a <<< b`. Символ "<<<" - означает "сильно меньше" ).
// Запустить цикл перебора от `a` до `b`. Вывести в консоль квадраты чётных чисел.
// 2. Заставить пользователя ввести с клавиатуры число (не строку и не NaN).
// Решение:
function first(){
pow[0].innerHTML = ''
all[0].innerHTML = ''
let a = parseInt(prompt('Введите число a:'))
let b = parseInt(prompt('Введите число b:'))
let nanA = isNaN(a)  // --------Проверку на строки не делал так как 
let nanB = isNaN(b)  // --------я сразу пробую преобразовать строку в число
let check = nanA===false&&nanB===false&&b-a>=10
while(!check){//Поскольку у нас всего одна истина и все остальное false,а нам нужно чтобы цикл работал,то мы берем обратное значение
    // Поскольку переменным каждый тик цикла присваивается новое значение,то цикл будет отрабатывать исправно
    a = parseInt(prompt('Неверные значения.Введите число a:'))
    b = parseInt(prompt('Введите число b:'))
    nanA = isNaN(a)
    nanB = isNaN(b)
    check = nanA===false&&nanB===false&&b-a>=10// -----истина при которой данные подходят,и цикл перестает работать
}

for(a;a<=b;a++){//После того,как первый цикл нашел истину,запускается цикл перебор
    all[0].insertAdjacentHTML('beforeend',`<div class="qual">${a}</div>`)
    if(a%2===0){
        let c = Math.pow(a,2)
        pow[0].insertAdjacentHTML('beforeend',`<div class="qual">${c}</div>`)
    }
}
}
//----------------------------------------------------------------------------------------
// P.S. Если нам нужно сделать более глубокую проверку на строку
// 2. Заставить пользователя ввести с клавиатуры число (не строку и не NaN).
function deepCheckString(){
    all[1].innerHTML = ''
    let check = ''// Перемменая check вынесена за пределы цикла потому что эта переменная является в проверкой этого же цикла
    do {
        let a = prompt('Введите число:')
        let c = parseFloat(a)// Преобразуем строку в число
        let nanC = isNaN(c)// Проверка на NaN
        let checkLength = c.toString().length===a.length//<----------------
        // Проверка,в который мы переменную c преобразуем обратно в строку,
        // так как у строк есть возможность посмотреть длину символов 
        // благодаря length и если у строки a длина символов не соответствует 
        // строке с,то это значение нам не подходит
        check = nanC===false&&checkLength// Истина
        if(check){
            all[1].insertAdjacentHTML('beforeend',`<div class="qual second"><h2>Поздравляю!Вы ввели число:${a}</h2></div>`)
        }
    }while (!check)
    }
//----------------------------------------------------------------------------------------
// 3. Проверить число на простоту. Число вводить с клавиатуры.
// Решение:
function third(a){
    all[2].innerHTML=''
    let i = a
    let result = ''
    //Поскольку parseInt при своем преобразовании берет только первые значения, 
    //которые может преобразовать,то проверку ,является ли число целым,делать не надо
    do{
        i--//цикл пребирает числа от с до 1
        if(a<=1||isNaN(a)){
            alert('Вы ввели неверные значения')
            result = 'Неверные значения'
            break;
        }
        if(a%i===0&&i!=a&&i!=1){//Проверяем делится ли число на что-то кроме себя и 1
            result = 'Составное'
            break;//как только нашли делитель,который не 1 и не c ,сразу останавливаем выполнение цикла
        }else if (i===1){//если цикл дошел до 1 и не нашел делителя,то это число простое
            result = 'Простое'
        }
    
    }while(i>=1)
    all[2].insertAdjacentHTML('beforeend',`<div class="qual second"><h2>Число ${a}:${result}</h2></div>`)
    
}
//----------------------------------------------------------------------------------------
// 4. Посчитать сумму простых чисел от 0 до 250.
// Решение:
function four(a){
    pow[1].innerHTML = ''
    all[3].innerHTML = ''
    let num = 1 //Переменная начала отсчета цикла
    let summ = 0//Переменная чтобы сложить все простые числа
    do{ 
        let check = true//Переменная проверка
        num++ //Поскольку все расчеты начнутся после первого тика do-while,то отсчет цикла начнется с 2
        for(let j =2 ;j<num;j++){//Вложенный цикл ,который создает новый отсчет для каждого тика цикла do-while,отсчет от 2 до num-1
            if(num%j===0){//Проверка делится ли num на какое либо число от 2 до num-1
                check = false //Присваиваем новое значение переменной check,которое говорит нам что число составное
                break;//останавливаем цикл for и переходим к следующему тику цикла do-while
            }
        }
        if(check===true){//Если при тике цикла do-while,переменная check вышла без изменений(true) из цикла for,значит число является простым
            all[3].insertAdjacentHTML('beforeend',`<div class="qual">${num}</div>`)
            summ+=num//Присваиваем переменной summ простое число и добавляем все следующие простые числа ,при успешном выходе переменной check из цикла for
        }
    }while(num<=a)
    pow[1].insertAdjacentHTML('beforeend',`<div class="qual">${summ}</div>`)
}
//----------------------------------------------------------------------------------------
start[0].addEventListener('click',e=>{
    first()
})
start[1].addEventListener('click',e=>{
    deepCheckString()
})
start[2].addEventListener('click',e=>{
    third(parseInt(prompt('Введите число a:')))
})
start[3].addEventListener('click',e=>{
    four(parseInt(prompt('Введите диапозон поиска простых чисел:')))
})
}
export default lection_2